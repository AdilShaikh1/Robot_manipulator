/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-06-11 16:55:34.936884
/// Generated using solver translationdirection5d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.000799999488000328)*x6);
x11=((6.39999590400262e-7)*x2);
x12=((0.46)*x4);
x13=((0.153)*x4);
x14=((1.083)*x2);
x15=((0.000799999488000328)*x7);
x16=((1.083)*x4);
x17=((0.000799999488000328)*x9);
x18=((0.46)*x2);
x19=((0.999999680000154)*x9);
x20=((0.999999680000154)*x8);
x21=((1.0)*x4);
x22=((1.0)*x2);
x23=((0.153)*x2);
x24=((6.39999590400262e-7)*x4);
x25=(x0*x3);
x26=(x3*x4);
x27=(x3*x5);
x28=(x1*x5);
x29=(x1*x2);
x30=(x0*x1);
x31=(x1*x24);
x32=(((x1*x4))+((x2*x3)));
x33=((((-1.0)*x21*x3))+x29);
x34=((((-1.0)*x21*x25))+((x0*x29)));
x35=(((x2*x27))+((x28*x4)));
x36=((((-1.0)*x22*x28))+((x26*x5)));
x37=((((-1.0)*x22*x25))+(((-1.0)*x21*x30)));
x38=(x37*x6);
IkReal x39=((1.0)*x25);
eetrans[0]=((((-1.0)*x39))+((x23*x25))+((x6*((((x18*x30))+(((-1.0)*x12*x39))))))+((x14*x30))+(((-0.2)*x0))+((x13*x30))+(((-0.07)*x5))+((x7*((((x18*x25))+((x12*x30))))))+(((-1.0)*x16*x39)));
IkReal x40=((1.0)*x28);
IkReal x41=((1.0)*x27);
eetrans[1]=((((0.2)*x5))+(((-1.0)*x23*x41))+((x16*x27))+x27+((x7*(((((-1.0)*x18*x41))+(((-1.0)*x12*x40))))))+((x6*(((((-1.0)*x18*x40))+((x12*x27))))))+(((-0.07)*x0))+(((-1.0)*x13*x40))+(((-1.0)*x14*x40)));
IkReal x42=((1.0)*x1);
eetrans[2]=((0.67)+((x7*(((((-1.0)*x18*x42))+((x12*x3))))))+((x1*x16))+(((-1.0)*x23*x42))+x1+((x14*x3))+((x6*((((x18*x3))+((x1*x12))))))+((x13*x3)));
eerot[0]=(((x7*((((x11*x25))+((x24*x30))))))+((x8*((((x10*x37))+((x15*x34))))))+((x17*x5))+(((-1.0)*x19*((((x34*x7))+x38))))+((x20*x5))+((x6*((((x11*x30))+(((-1.0)*x24*x25)))))));
IkReal x43=((1.0)*x11);
eerot[1]=(((x6*(((((-1.0)*x28*x43))+((x24*x27))))))+((x0*x20))+((x0*x17))+((x8*((((x10*x35))+((x15*x36))))))+((x7*(((((-1.0)*x27*x43))+(((-1.0)*x24*x28))))))+(((-1.0)*x19*((((x35*x6))+((x36*x7)))))));
eerot[2]=(((x9*(((((-0.999999680000154)*x33*x6))+(((-0.999999680000154)*x32*x7))))))+((x8*((((x10*x33))+((x15*x32))))))+((x7*(((((-1.0)*x1*x11))+((x24*x3))))))+((x6*((((x11*x3))+x31)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.67)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[2];
j0eval[0]=((px*px)+(py*py));
j0eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x46 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x46.valid){
continue;
}
IkReal x44=((1.0)*(x46.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x47=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x47.valid){
continue;
}
if( (((0.07)*(x47.value))) < -1-IKFAST_SINCOS_THRESH || (((0.07)*(x47.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x45=IKasin(((0.07)*(x47.value)));
j0array[0]=((((-1.0)*x45))+(((-1.0)*x44)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x44))+x45);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((((1.0000000000002)*cj0*r00))+(((1.0000000000002)*r01*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((((1.0000000000002)*cj0*r00))+(((1.0000000000002)*r01*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x48=IKasin(((((1.0000000000002)*cj0*r00))+(((1.0000000000002)*r01*sj0))));
j4array[0]=((3.14079265401646)+(((-1.0)*x48)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((6.28238530760625)+x48);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x49=py*py;
IkReal x50=pz*pz;
IkReal x51=px*px;
IkReal x52=((1.17759924633648e-6)*pz);
IkReal x53=((0.7344)*r02);
IkReal x54=((0.118392)*r02);
IkReal x55=((2.35519849267296e-6)*pz);
IkReal x56=((0.4896)*r02);
IkReal x57=(r00*sj0);
IkReal x58=(cj0*r01);
IkReal x59=(r01*sj0);
IkReal x60=(cj0*r02);
IkReal x61=((0.56)*px);
IkReal x62=(cj0*r00);
IkReal x63=(cj0*py);
IkReal x64=(py*r00);
IkReal x65=((1.6)*pz);
IkReal x66=((1.132)*pz);
IkReal x67=(pz*r02);
IkReal x68=((9.132)*pz);
IkReal x69=(px*sj0);
IkReal x70=((4.0)*py);
IkReal x71=(px*r00);
IkReal x72=((0.56)*pz);
IkReal x73=((0.28)*px);
IkReal x74=((0.612)*pz);
IkReal x75=((0.28)*pz);
IkReal x76=((8.0)*pz);
IkReal x77=(py*r01);
IkReal x78=((7.532)*pz);
IkReal x79=((0.468)*pz);
IkReal x80=(r01*x73);
IkReal x81=((1.17759924633648e-6)*x63);
IkReal x82=((1.17759924633648e-6)*x69);
IkReal x83=((0.28)*x64);
IkReal x84=((0.900804)*x58);
IkReal x85=((0.900804)*x57);
IkReal x86=((4.8)*x67);
IkReal x87=((0.336)*x59);
IkReal x88=((4.8)*x77);
IkReal x89=((4.8)*x71);
IkReal x90=((0.336)*x62);
IkReal x91=((1.224)*x58);
IkReal x92=((1.224)*x57);
IkReal x93=((0.699196)*x58);
IkReal x94=((0.699196)*x57);
IkReal x95=((3.2)*x77);
IkReal x96=((3.2)*x67);
IkReal x97=((0.224)*x62);
IkReal x98=((3.2)*x71);
IkReal x99=((0.224)*x59);
IkReal x100=((0.112)*x59);
IkReal x101=((1.6)*x71);
IkReal x102=((2.35519849267296e-6)*x63);
IkReal x103=((1.6)*x77);
IkReal x104=(r02*x65);
IkReal x105=(r01*x61);
IkReal x106=((0.112)*x62);
IkReal x107=((0.56)*x64);
IkReal x108=((2.35519849267296e-6)*x69);
IkReal x109=((2.0)*x51);
IkReal x110=((4.0)*x50);
IkReal x111=((2.0)*x49);
IkReal x112=((2.0)*x50);
IkReal x113=((4.0)*x49);
IkReal x114=((8.0)*px*py);
IkReal x115=((4.0)*x51);
IkReal x116=(py*r02*sj0);
IkReal x117=(pz*r01*x70);
IkReal x118=(x59*x75);
IkReal x119=(x62*x75);
IkReal x120=(r02*x112);
IkReal x121=((4.0)*pz*x71);
IkReal x122=(x60*x73);
IkReal x123=((0.28)*x116);
IkReal x124=(r02*x111);
IkReal x125=(r02*x109);
IkReal x126=(x58*x74);
IkReal x127=((0.612)*r02*x69);
IkReal x128=((0.612)*py*x60);
IkReal x129=(x57*x74);
IkReal x130=(x71*x76);
IkReal x131=(x62*x72);
IkReal x132=((1.6)*py*x60);
IkReal x133=(x76*x77);
IkReal x134=(x57*x65);
IkReal x135=(r02*x110);
IkReal x136=(x59*x72);
IkReal x137=(x60*x61);
IkReal x138=((0.56)*x116);
IkReal x139=(r02*x115);
IkReal x140=(x58*x65);
IkReal x141=(r02*x113);
IkReal x142=((1.6)*r02*x69);
IkReal x143=(px*x59*x70);
IkReal x144=((4.0)*x67*x69);
IkReal x145=(x109*x57);
IkReal x146=(x112*x58);
IkReal x147=(x109*x58);
IkReal x148=(pz*x60*x70);
IkReal x149=(x111*x58);
IkReal x150=(x111*x57);
IkReal x151=(x112*x57);
IkReal x152=(px*x62*x70);
IkReal x153=(x110*x58);
IkReal x154=(x115*x57);
IkReal x155=(x114*x59);
IkReal x156=((8.0)*x67*x69);
IkReal x157=(x115*x58);
IkReal x158=(x113*x57);
IkReal x159=(x114*x62);
IkReal x160=(x110*x57);
IkReal x161=(py*x60*x76);
IkReal x162=(x113*x58);
IkReal x163=(x128+x129);
IkReal x164=(x126+x127);
IkReal x165=(x124+x125+x122+x123+x52);
IkReal x166=(x120+x121+x117+x119+x118);
IkReal x167=(x140+x141+x142+x137+x139+x138+x55+x54);
IkReal x168=(x135+x134+x136+x131+x130+x133+x132);
IkReal x169=(x162+x160+x161+x159+x158+x108+x107);
IkReal x170=((9.42079397069186e-7)+x143+x144+x145+x146+x147+x80+x81+x93);
IkReal x171=((1.41311909560378e-6)+x152+x151+x150+x148+x149+x82+x83+x84);
IkReal x172=(x157+x156+x155+x154+x153+x104+x105+x106+x100+x101+x102+x103);
IkReal x173=(x143+x144+x145+x146+x147+x88+x89+x80+x81+x86+x87+x85+x90);
IkReal x174=(x152+x151+x150+x148+x149+x82+x83+x99+x98+x95+x94+x97+x96);
IkReal x175=((((-9.132)*py*x60))+(((10.057596)*r02))+(((-1.0)*x166))+((x58*x68))+x165+(((-1.0)*x57*x68))+(((9.132)*r02*x69)));
IkReal x176=((((-1.0)*x165))+((x58*x78))+(((-6.724796)*r02))+(((-7.532)*py*x60))+x166+(((-1.0)*x57*x78))+(((7.532)*r02*x69)));
IkReal x177=((((-1.0)*x165))+(((-0.468)*r02*x69))+((x57*x79))+x166+(((0.468)*py*x60))+(((-1.0)*x58*x79))+(((0.339204)*r02)));
IkReal x178=((((-1.0)*x166))+(((-0.206404)*r02))+((x58*x66))+x165+(((-1.132)*py*x60))+(((-1.0)*x57*x66))+(((1.132)*r02*x69)));
IkReal x179=((((-1.0)*x167))+x168+x92+(((-1.0)*x91)));
IkReal x180=((((-1.0)*x167))+x168+x91+(((-1.0)*x92)));
IkReal x181=((4.71039698534593e-7)+(((-1.0)*x172))+(((-16.462392)*x58))+x169+(((16.462392)*x57)));
IkReal x182=((-4.71039698534593e-7)+(((0.865608)*x57))+(((-1.0)*x169))+(((-0.865608)*x58))+x172);
IkReal x183=((((-1.0)*x163))+(((-1.0)*x173))+x171+x164+x53);
IkReal x184=((((-1.0)*x163))+(((-1.0)*x174))+x170+x164+(((-1.0)*x56)));
IkReal x185=((((-1.0)*x164))+(((-1.0)*x173))+x171+x163+(((-1.0)*x53)));
IkReal x186=((((-1.0)*x164))+(((-1.0)*x174))+x170+x163+x56);
IkReal gconst40=x175;
IkReal gconst41=x181;
IkReal gconst42=x176;
IkReal gconst43=x183;
IkReal gconst44=x179;
IkReal gconst45=x184;
IkReal gconst46=x175;
IkReal gconst47=x181;
IkReal gconst48=x176;
IkReal gconst49=x183;
IkReal gconst50=x179;
IkReal gconst51=x184;
IkReal gconst52=x185;
IkReal gconst53=x180;
IkReal gconst54=x186;
IkReal gconst55=x177;
IkReal gconst56=x182;
IkReal gconst57=x178;
IkReal gconst58=x185;
IkReal gconst59=x180;
IkReal gconst60=x186;
IkReal gconst61=x177;
IkReal gconst62=x182;
IkReal gconst63=x178;
IkReal x187=(gconst42*gconst43);
IkReal x188=(gconst45*gconst46);
IkReal x189=((1.0)*gconst52);
IkReal x190=(gconst46*gconst57);
IkReal x191=(gconst41*gconst62);
IkReal x192=(gconst53*gconst57);
IkReal x193=(gconst50*gconst58);
IkReal x194=(gconst54*gconst55);
IkReal x195=((1.0)*gconst59);
IkReal x196=(gconst48*gconst61);
IkReal x197=(gconst40*gconst57);
IkReal x198=(gconst50*gconst53);
IkReal x199=(gconst43*gconst54);
IkReal x200=(gconst46*gconst51);
IkReal x201=(gconst42*gconst47);
IkReal x202=(gconst56*gconst61);
IkReal x203=(gconst41*gconst45);
IkReal x204=(gconst45*gconst53);
IkReal x205=((1.0)*gconst60);
IkReal x206=(gconst42*gconst55);
IkReal x207=(gconst44*gconst49);
IkReal x208=(gconst54*gconst59);
IkReal x209=((1.0)*gconst54);
IkReal x210=(gconst46*gconst62);
IkReal x211=((1.0)*gconst40);
IkReal x212=(gconst41*gconst50);
IkReal x213=(gconst46*gconst63);
IkReal x214=(gconst58*gconst63);
IkReal x215=(gconst58*gconst62);
IkReal x216=(gconst45*gconst52);
IkReal x217=(gconst48*gconst49);
IkReal x218=(gconst51*gconst58);
IkReal x219=(gconst49*gconst60);
IkReal x220=(gconst41*gconst57);
IkReal x221=(gconst42*gconst59);
IkReal x222=(gconst49*gconst56);
IkReal x223=(gconst44*gconst61);
IkReal x224=(gconst46*gconst50);
IkReal x225=(gconst52*gconst57);
IkReal x226=(gconst47*gconst54);
IkReal x227=(gconst40*gconst45);
IkReal x228=(gconst60*gconst61);
IkReal x229=(gconst53*gconst62);
IkReal x230=((1.0)*x217);
IkReal x231=((1.0)*gconst42*gconst56);
IkReal x232=((1.0)*gconst47*gconst61);
IkReal x233=((1.0)*gconst42*gconst44);
IkReal x234=((1.0)*gconst47*gconst49);
op[0]=(((x225*x228))+(((-1.0)*gconst57*x189*x214))+(((-1.0)*gconst56*x209*x215))+(((-1.0)*gconst61*x194*x205))+((x202*x208))+(((-1.0)*gconst61*x192*x195))+((x192*x215))+((x194*x214)));
op[1]=(((gconst57*gconst58*x191))+(((-1.0)*x192*x232))+((x204*x215))+((x196*x225))+(((-1.0)*gconst61*x195*x220))+((x216*x228))+((x199*x214))+((x206*x214))+((x208*x223))+((x208*x222))+(((-1.0)*x215*x231))+(((-1.0)*gconst57*x189*x218))+(((-1.0)*x194*x196))+((x202*x221))+((x202*x226))+(((-1.0)*gconst63*x189*x190))+(((-1.0)*gconst45*x189*x214))+(((-1.0)*gconst56*x193*x209))+(((-1.0)*gconst44*x209*x215))+(((-1.0)*gconst56*x209*x210))+((x219*x225))+(((-1.0)*gconst61*x195*x204))+((x192*x193))+(((-1.0)*gconst49*x194*x205))+(((-1.0)*gconst49*x192*x195))+(((-1.0)*x197*x214))+(((-1.0)*gconst61*x199*x205))+((x197*x228))+(((-1.0)*gconst61*x205*x206))+((x190*x229))+((x194*x218))+((x194*x213)));
op[2]=(((x227*x228))+(((-1.0)*x194*x230))+(((-1.0)*x192*x234))+(((-1.0)*x204*x232))+((x188*x229))+((x197*x219))+((x222*x226))+((x199*x213))+((x199*x218))+(((-1.0)*gconst45*x211*x214))+((x194*x200))+((x206*x213))+((x206*x218))+(((-1.0)*x215*x233))+((x216*x219))+(((-1.0)*gconst63*x188*x189))+((x201*x202))+(((-1.0)*x196*x199))+((x193*x220))+(((-1.0)*gconst45*x189*x218))+((x196*x197))+(((-1.0)*x210*x231))+(((-1.0)*gconst44*x209*x210))+(((-1.0)*gconst49*x195*x204))+((x223*x226))+((x196*x216))+(((-1.0)*gconst61*x195*x203))+(((-1.0)*gconst51*x189*x190))+(((-1.0)*x197*x218))+(((-1.0)*gconst61*x187*x205))+(((-1.0)*x196*x206))+(((-1.0)*x220*x232))+((gconst45*gconst58*x191))+(((-1.0)*gconst49*x195*x220))+(((-1.0)*gconst63*x190*x211))+((x217*x225))+((x190*x198))+((x190*x191))+((x221*x223))+((x221*x222))+(((-1.0)*x193*x231))+((x193*x204))+((x187*x214))+(((-1.0)*gconst49*x199*x205))+(((-1.0)*gconst56*x209*x224))+((x207*x208))+(((-1.0)*gconst44*x193*x209))+(((-1.0)*gconst49*x205*x206)));
op[3]=(((x190*x212))+((x196*x227))+(((-1.0)*x204*x234))+((x207*x221))+((x207*x226))+(((-1.0)*x224*x231))+((x197*x217))+(((-1.0)*gconst45*x211*x218))+(((-1.0)*x203*x232))+((x200*x206))+(((-1.0)*gconst51*x188*x189))+((x216*x217))+((x188*x198))+((x188*x191))+(((-1.0)*x210*x233))+(((-1.0)*gconst49*x195*x203))+(((-1.0)*x187*x196))+((x219*x227))+(((-1.0)*x206*x230))+(((-1.0)*x220*x234))+(((-1.0)*x193*x233))+(((-1.0)*x199*x230))+(((-1.0)*gconst49*x187*x205))+((x201*x223))+((x201*x222))+((x193*x203))+((x187*x213))+((x187*x218))+((x199*x200))+(((-1.0)*gconst44*x209*x224))+(((-1.0)*gconst51*x190*x211))+(((-1.0)*gconst63*x188*x211)));
op[4]=(((x187*x200))+(((-1.0)*x224*x233))+(((-1.0)*x203*x234))+(((-1.0)*x187*x230))+((x201*x207))+(((-1.0)*gconst51*x188*x211))+((x217*x227))+((x188*x212)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x235=IKPowWithIntegerCheck(IKsign((((((((r00*sj0*sj2*(pz*pz)))+(((0.14)*cj0*cj2*px*r02))+(((-0.14)*cj0*cj2*pz*r00))+(((-0.4)*cj0*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-5.88799623168241e-7)*cj0*py*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.14)*pz*r01*sj0))+(((5.88799623168241e-7)*px*sj0*sj2))+(((-0.14)*cj0*pz*r00))+(((-0.4)*pz*r02*sj2))+(((-0.4)*px*r00*sj2))+(((-0.4)*pz*r00*sj0))+(((0.14)*cj0*px*r02))+(((0.14)*py*r00*sj2))+((cj2*r02*(py*py)))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+(((-0.4)*cj2*pz*r00*sj0))+(((5.88799623168241e-7)*pz))+(((0.14)*py*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((5.88799623168241e-7)*cj2*pz))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((4.195598)*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.4)*px*r02*sj0))+(((4.195598)*cj2*r02))+(((-0.4)*py*r01*sj2))+(((-0.14)*px*r01*sj2))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.4)*cj2*px*r02*sj0))+(((0.4)*cj0*pz*r01))+(((-0.306)*r02*sj2))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.028)*cj0*r00*sj2))+(((-0.050402)*r00*sj0*sj2))+(((0.14)*cj2*py*r02*sj0))+(((0.050402)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((0.4)*cj0*cj2*pz*r01))+(((1.17759924633648e-7)*sj2))+(((-0.4)*cj0*cj2*py*r02))+(((-0.028)*r01*sj0*sj2))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))+(((-0.14)*cj2*pz*r01*sj0))))*(((-1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((-0.4)*cj2*pz*r02))+(((-1.0)*r00*sj0*(pz*pz)))+(((-0.306)*cj0*r01*sj2))+(((-0.028)*cj2*r01*sj0))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-0.14)*py*r00))+(((-0.4)*cj2*px*r00))+(((-1.0)*r00*sj0*(py*py)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.028)*r01*sj0))+(((0.216402)*cj0*cj2*r01))+(((2.0)*px*py*r01*sj0))+(((0.4)*px*r00))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((0.4)*pz*r02))+(((-0.029598)*r02*sj2))+(((2.0)*py*pz*r01*sj2))+(((-5.88799623168241e-7)*px*sj0))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((1.17759924633648e-7)*cj2))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.216402)*cj2*r00*sj0))+(((0.4)*py*r01))+(((0.14)*px*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-0.216402)*cj0*r01))+(((-2.0)*cj0*py*pz*r02))+(((0.4)*pz*r00*sj0*sj2))+(((5.88799623168241e-7)*cj0*py))+(((2.0)*px*pz*r00*sj2))+(((0.028)*cj0*r00))+(((-1.0)*cj0*r01*(py*py)))+(((0.216402)*r00*sj0))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((0.306)*r00*sj0*sj2))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py)))))))+(((((((0.4)*pz*r02*sj2))+(((-1.0)*r00*sj0*sj2*(pz*pz)))+(((-0.14)*py*r00*sj2))+(((-0.4)*cj0*py*r02))+(((0.136402)*cj2*r02))+(((1.0)*cj2*r02*(pz*pz)))+(((-0.4)*cj0*cj2*pz*r01))+(((-5.88799623168241e-7)*px*sj0*sj2))+(((0.028)*cj0*r00*sj2))+(((-0.14)*pz*r01*sj0))+(((-0.14)*cj0*pz*r00))+(((1.0)*r00*sj0*sj2*(px*px)))+(((0.14)*cj2*pz*r01*sj0))+(((-2.0)*cj0*px*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((-0.4)*pz*r00*sj0))+(((0.14)*cj0*px*r02))+(((-0.050402)*cj0*r01*sj2))+(((0.4)*cj2*pz*r00*sj0))+(((1.0)*r02*(py*py)))+(((5.88799623168241e-7)*cj0*py*sj2))+(((0.14)*cj0*cj2*pz*r00))+(((2.0)*cj2*px*pz*r00))+(((1.0)*cj0*r01*sj2*(pz*pz)))+(((-0.136402)*r02))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((-5.88799623168241e-7)*cj2*pz))+(((1.0)*cj0*r01*sj2*(px*px)))+(((5.88799623168241e-7)*pz))+(((0.4)*cj0*cj2*py*r02))+(((0.14)*py*r02*sj0))+(((0.050402)*r00*sj0*sj2))+(((-1.17759924633648e-7)*sj2))+(((1.0)*r02*(px*px)))+(((2.0)*cj2*py*pz*r01))+(((-0.14)*cj2*py*r02*sj0))+(((0.14)*px*r01*sj2))+(((0.4)*px*r02*sj0))+(((2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-0.14)*cj0*cj2*px*r02))+(((-2.0)*px*pz*r00))+(((2.0)*px*py*r01*sj0*sj2))+(((0.4)*py*r01*sj2))+(((-0.4)*cj2*px*r02*sj0))+(((0.4)*cj0*pz*r01))+(((-0.306)*r02*sj2))+(((-2.0)*py*pz*r01))+(((-2.0)*cj0*py*pz*r02*sj2))+(((0.028)*r01*sj0*sj2))+(((-1.0)*r02*(pz*pz)))+(((0.4)*px*r00*sj2))))*(((1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((4.115598)*cj2*r00*sj0))+(((-0.4)*px*r00))+(((-0.4)*cj2*pz*r02))+(((-2.0)*px*pz*r02*sj0))+(((-0.028)*cj2*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((-0.028)*cj0*r00))+(((-2.0)*cj2*px*pz*r02*sj0))+(((0.14)*py*r00))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((-4.115598)*cj0*r01))+(((-0.4)*cj2*px*r00))+(((-0.028)*r01*sj0))+(((-0.14)*px*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((-4.115598)*cj0*cj2*r01))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((-0.029598)*r02*sj2))+(((5.88799623168241e-7)*px*sj0))+(((0.306)*cj0*r01*sj2))+(((2.0)*py*pz*r01*sj2))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((4.115598)*r00*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((-0.306)*r00*sj0*sj2))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((1.17759924633648e-7)*cj2))+(((-0.4)*pz*r02))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.4)*py*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-5.88799623168241e-7)*cj0*py))+((cj0*r01*(py*py)))+(((0.4)*pz*r00*sj0*sj2))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py))))))))),-1);
if(!x235.valid){
continue;
}
CheckValue<IkReal> x236 = IKatan2WithCheck(IkReal(((((((((-0.0612)*r02*sj2))+(((4.166)*cj2*px*r02*sj0))+(((-4.166)*pz*r00*sj0))+(((-0.14)*cj0*r00*sj2))+(((-0.306)*px*r02*sj0*sj2))+(((-0.4)*r00*sj0*sj2))+(((4.166)*px*r02*sj0))+(((4.166)*cj0*pz*r01))+(((-0.306)*cj0*pz*r01*sj2))+(((-0.14)*r01*sj0*sj2))+(((4.166)*cj0*cj2*pz*r01))+(((-4.166)*cj2*pz*r00*sj0))+(((0.306)*cj0*py*r02*sj2))+(((-2.0)*py*r01*sj2))+(((0.4)*cj0*r01*sj2))+(((-4.166)*cj0*py*r02))+(((-4.166)*cj0*cj2*py*r02))+(((5.88799623168241e-7)*sj2))+(((-2.0)*px*r00*sj2))+(((0.8332)*cj2*r02))+(((0.306)*pz*r00*sj0*sj2))+(((-2.0)*pz*r02*sj2))+(((0.8332)*r02))))*((((r00*sj0*sj2*(pz*pz)))+(((0.14)*cj0*cj2*px*r02))+(((-0.14)*cj0*cj2*pz*r00))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-5.88799623168241e-7)*cj0*py*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.306)*r02*sj2))+(((0.14)*cj0*pz*r00))+(((-0.4)*cj0*pz*r01))+(((5.88799623168241e-7)*px*sj0*sj2))+(((-0.4)*pz*r02*sj2))+(((2.0)*px*pz*r00))+(((-0.4)*px*r00*sj2))+(((0.14)*py*r00*sj2))+(((-0.4)*px*r02*sj0))+((cj2*r02*(py*py)))+(((-5.88799623168241e-7)*pz))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((-0.4)*cj2*pz*r00*sj0))+((cj0*r01*sj2*(py*py)))+(((5.88799623168241e-7)*cj2*pz))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.136402)*r02))+(((-0.4)*py*r01*sj2))+(((-0.14)*px*r01*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((0.4)*cj2*px*r02*sj0))+(((0.4)*pz*r00*sj0))+(((0.14)*pz*r01*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.028)*cj0*r00*sj2))+(((-0.050402)*r00*sj0*sj2))+(((0.14)*cj2*py*r02*sj0))+(((0.050402)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-0.14)*py*r02*sj0))+(((-1.0)*r02*(px*px)))+(((-0.136402)*cj2*r02))+(((2.0)*py*pz*r01))+(((-0.14)*cj0*px*r02))+(((0.4)*cj0*cj2*pz*r01))+(((1.17759924633648e-7)*sj2))+(((-1.0)*r02*(py*py)))+(((-0.4)*cj0*cj2*py*r02))+(((-0.028)*r01*sj0*sj2))+(((0.4)*cj0*py*r02))+(((2.0)*cj0*py*pz*r02*sj2))+(((-0.14)*cj2*pz*r01*sj0))+((r02*(pz*pz)))))))+(((((((2.0)*pz*r02*sj2))+(((-0.0612)*r02*sj2))+(((0.14)*r01*sj0*sj2))+(((-0.166)*px*r02*sj0))+(((-0.166)*cj0*pz*r01))+(((-0.306)*px*r02*sj0*sj2))+(((0.166)*cj2*px*r02*sj0))+(((0.166)*pz*r00*sj0))+(((-5.88799623168241e-7)*sj2))+(((0.14)*cj0*r00*sj2))+(((-0.0332)*r02))+(((0.166)*cj0*cj2*pz*r01))+(((0.4)*r00*sj0*sj2))+(((-0.306)*cj0*pz*r01*sj2))+(((0.0332)*cj2*r02))+(((2.0)*px*r00*sj2))+(((-0.166)*cj2*pz*r00*sj0))+(((0.166)*cj0*py*r02))+(((2.0)*py*r01*sj2))+(((0.306)*cj0*py*r02*sj2))+(((-0.166)*cj0*cj2*py*r02))+(((0.306)*pz*r00*sj0*sj2))+(((-0.4)*cj0*r01*sj2))))*((((r00*sj0*sj2*(pz*pz)))+(((0.14)*cj0*cj2*px*r02))+(((-0.14)*cj0*cj2*pz*r00))+(((-0.4)*cj0*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-5.88799623168241e-7)*cj0*py*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.14)*pz*r01*sj0))+(((5.88799623168241e-7)*px*sj0*sj2))+(((-0.14)*cj0*pz*r00))+(((-0.4)*pz*r02*sj2))+(((-0.4)*px*r00*sj2))+(((-0.4)*pz*r00*sj0))+(((0.14)*cj0*px*r02))+(((0.14)*py*r00*sj2))+((cj2*r02*(py*py)))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+(((-0.4)*cj2*pz*r00*sj0))+(((5.88799623168241e-7)*pz))+(((0.14)*py*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((5.88799623168241e-7)*cj2*pz))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((4.195598)*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.4)*px*r02*sj0))+(((4.195598)*cj2*r02))+(((-0.4)*py*r01*sj2))+(((-0.14)*px*r01*sj2))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.4)*cj2*px*r02*sj0))+(((0.4)*cj0*pz*r01))+(((-0.306)*r02*sj2))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.028)*cj0*r00*sj2))+(((-0.050402)*r00*sj0*sj2))+(((0.14)*cj2*py*r02*sj0))+(((0.050402)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((0.4)*cj0*cj2*pz*r01))+(((1.17759924633648e-7)*sj2))+(((-0.4)*cj0*cj2*py*r02))+(((-0.028)*r01*sj0*sj2))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))+(((-0.14)*cj2*pz*r01*sj0)))))))),IkReal(((((((((0.0612)*r02*sj2))+(((-0.166)*cj0*py*r02))+(((-0.0332)*cj2*r02))+(((-0.14)*cj0*r00*sj2))+(((-0.306)*cj0*py*r02*sj2))+(((-0.4)*r00*sj0*sj2))+(((-0.166)*pz*r00*sj0))+(((-0.14)*r01*sj0*sj2))+(((0.166)*px*r02*sj0))+(((-0.166)*cj2*px*r02*sj0))+(((0.166)*cj0*cj2*py*r02))+(((0.0332)*r02))+(((-2.0)*py*r01*sj2))+(((0.4)*cj0*r01*sj2))+(((-0.166)*cj0*cj2*pz*r01))+(((0.166)*cj0*pz*r01))+(((5.88799623168241e-7)*sj2))+(((0.306)*px*r02*sj0*sj2))+(((-2.0)*px*r00*sj2))+(((0.306)*cj0*pz*r01*sj2))+(((-2.0)*pz*r02*sj2))+(((0.166)*cj2*pz*r00*sj0))+(((-0.306)*pz*r00*sj0*sj2))))*(((1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((4.115598)*cj2*r00*sj0))+(((-0.4)*px*r00))+(((-0.4)*cj2*pz*r02))+(((-2.0)*px*pz*r02*sj0))+(((-0.028)*cj2*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((-0.028)*cj0*r00))+(((-2.0)*cj2*px*pz*r02*sj0))+(((0.14)*py*r00))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((-4.115598)*cj0*r01))+(((-0.4)*cj2*px*r00))+(((-0.028)*r01*sj0))+(((-0.14)*px*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((-4.115598)*cj0*cj2*r01))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((-0.029598)*r02*sj2))+(((5.88799623168241e-7)*px*sj0))+(((0.306)*cj0*r01*sj2))+(((2.0)*py*pz*r01*sj2))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((4.115598)*r00*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((-0.306)*r00*sj0*sj2))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((1.17759924633648e-7)*cj2))+(((-0.4)*pz*r02))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.4)*py*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-5.88799623168241e-7)*cj0*py))+((cj0*r01*(py*py)))+(((0.4)*pz*r00*sj0*sj2))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py)))))))+(((((((0.0612)*r02*sj2))+(((2.0)*pz*r02*sj2))+(((0.14)*r01*sj0*sj2))+(((4.166)*cj2*pz*r00*sj0))+(((-0.306)*cj0*py*r02*sj2))+(((-4.166)*px*r02*sj0))+(((-4.166)*cj2*px*r02*sj0))+(((4.166)*cj0*cj2*py*r02))+(((-5.88799623168241e-7)*sj2))+(((0.14)*cj0*r00*sj2))+(((-0.8332)*r02))+(((4.166)*pz*r00*sj0))+(((4.166)*cj0*py*r02))+(((-4.166)*cj0*pz*r01))+(((0.4)*r00*sj0*sj2))+(((2.0)*px*r00*sj2))+(((2.0)*py*r01*sj2))+(((-4.166)*cj0*cj2*pz*r01))+(((0.306)*px*r02*sj0*sj2))+(((0.306)*cj0*pz*r01*sj2))+(((-0.4)*cj0*r01*sj2))+(((-0.306)*pz*r00*sj0*sj2))+(((-0.8332)*cj2*r02))))*(((-1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((-0.4)*cj2*pz*r02))+(((-1.0)*r00*sj0*(pz*pz)))+(((-0.306)*cj0*r01*sj2))+(((-0.028)*cj2*r01*sj0))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-0.14)*py*r00))+(((-0.4)*cj2*px*r00))+(((-1.0)*r00*sj0*(py*py)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.028)*r01*sj0))+(((0.216402)*cj0*cj2*r01))+(((2.0)*px*py*r01*sj0))+(((0.4)*px*r00))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((0.4)*pz*r02))+(((-0.029598)*r02*sj2))+(((2.0)*py*pz*r01*sj2))+(((-5.88799623168241e-7)*px*sj0))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((1.17759924633648e-7)*cj2))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.216402)*cj2*r00*sj0))+(((0.4)*py*r01))+(((0.14)*px*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-0.216402)*cj0*r01))+(((-2.0)*cj0*py*pz*r02))+(((0.4)*pz*r00*sj0*sj2))+(((5.88799623168241e-7)*cj0*py))+(((2.0)*px*pz*r00*sj2))+(((0.028)*cj0*r00))+(((-1.0)*cj0*r01*(py*py)))+(((0.216402)*r00*sj0))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((0.306)*r00*sj0*sj2))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py))))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x236.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x235.value)))+(x236.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((((1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((4.115598)*cj2*r00*sj0))+(((-0.4)*px*r00))+(((-0.4)*cj2*pz*r02))+(((-2.0)*px*pz*r02*sj0))+(((-0.028)*cj2*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((-0.028)*cj0*r00))+(((-2.0)*cj2*px*pz*r02*sj0))+(((0.14)*py*r00))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((-4.115598)*cj0*r01))+(((-0.4)*cj2*px*r00))+(((-0.028)*r01*sj0))+(((-0.14)*px*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((-4.115598)*cj0*cj2*r01))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((-0.029598)*r02*sj2))+(((5.88799623168241e-7)*px*sj0))+(((0.306)*cj0*r01*sj2))+(((2.0)*py*pz*r01*sj2))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((4.115598)*r00*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((-0.306)*r00*sj0*sj2))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((1.17759924633648e-7)*cj2))+(((-0.4)*pz*r02))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.4)*py*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-5.88799623168241e-7)*cj0*py))+((cj0*r01*(py*py)))+(((0.4)*pz*r00*sj0*sj2))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py)))))*(IKsin(j1))))+(((-0.0612)*r02*sj2))+(((4.166)*cj2*px*r02*sj0))+(((-4.166)*pz*r00*sj0))+(((-0.14)*cj0*r00*sj2))+(((-0.306)*px*r02*sj0*sj2))+(((-0.4)*r00*sj0*sj2))+(((4.166)*px*r02*sj0))+(((4.166)*cj0*pz*r01))+(((-0.306)*cj0*pz*r01*sj2))+(((-0.14)*r01*sj0*sj2))+(((4.166)*cj0*cj2*pz*r01))+(((-4.166)*cj2*pz*r00*sj0))+(((0.306)*cj0*py*r02*sj2))+(((-2.0)*py*r01*sj2))+(((0.4)*cj0*r01*sj2))+(((-4.166)*cj0*py*r02))+(((-4.166)*cj0*cj2*py*r02))+(((5.88799623168241e-7)*sj2))+(((-2.0)*px*r00*sj2))+(((0.8332)*cj2*r02))+(((0.306)*pz*r00*sj0*sj2))+((((((r00*sj0*sj2*(pz*pz)))+(((0.14)*cj0*cj2*px*r02))+(((-0.14)*cj0*cj2*pz*r00))+(((-0.4)*cj0*py*r02))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-5.88799623168241e-7)*cj0*py*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((-0.14)*pz*r01*sj0))+(((5.88799623168241e-7)*px*sj0*sj2))+(((-0.14)*cj0*pz*r00))+(((-0.4)*pz*r02*sj2))+(((-0.4)*px*r00*sj2))+(((-0.4)*pz*r00*sj0))+(((0.14)*cj0*px*r02))+(((0.14)*py*r00*sj2))+((cj2*r02*(py*py)))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+((r02*(px*px)))+(((-0.4)*cj2*pz*r00*sj0))+(((5.88799623168241e-7)*pz))+(((0.14)*py*r02*sj0))+((cj0*r01*sj2*(py*py)))+(((5.88799623168241e-7)*cj2*pz))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((4.195598)*r02))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.4)*px*r02*sj0))+(((4.195598)*cj2*r02))+(((-0.4)*py*r01*sj2))+(((-0.14)*px*r01*sj2))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((2.0)*cj0*px*py*r00*sj2))+(((0.4)*cj2*px*r02*sj0))+(((0.4)*cj0*pz*r01))+(((-0.306)*r02*sj2))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.028)*cj0*r00*sj2))+(((-0.050402)*r00*sj0*sj2))+(((0.14)*cj2*py*r02*sj0))+(((0.050402)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-2.0)*py*pz*r01))+(((0.4)*cj0*cj2*pz*r01))+(((1.17759924633648e-7)*sj2))+(((-0.4)*cj0*cj2*py*r02))+(((-0.028)*r01*sj0*sj2))+(((-1.0)*r02*(pz*pz)))+(((2.0)*cj0*py*pz*r02*sj2))+(((-0.14)*cj2*pz*r01*sj0))))*(IKcos(j1))))+(((-2.0)*pz*r02*sj2))+(((0.8332)*r02)));
evalcond[1]=((((0.0612)*r02*sj2))+(((-0.166)*cj0*py*r02))+(((((-1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((-0.4)*cj2*pz*r02))+(((-1.0)*r00*sj0*(pz*pz)))+(((-0.306)*cj0*r01*sj2))+(((-0.028)*cj2*r01*sj0))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((2.0)*px*pz*r02*sj0))+(((-2.0)*cj2*px*pz*r02*sj0))+(((-0.14)*py*r00))+(((-0.4)*cj2*px*r00))+(((-1.0)*r00*sj0*(py*py)))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((0.028)*r01*sj0))+(((0.216402)*cj0*cj2*r01))+(((2.0)*px*py*r01*sj0))+(((0.4)*px*r00))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+((cj0*r01*(px*px)))+((r00*sj0*(px*px)))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((0.4)*pz*r02))+(((-0.029598)*r02*sj2))+(((2.0)*py*pz*r01*sj2))+(((-5.88799623168241e-7)*px*sj0))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*cj0*px*py*r00))+((cj0*r01*(pz*pz)))+(((1.17759924633648e-7)*cj2))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.216402)*cj2*r00*sj0))+(((0.4)*py*r01))+(((0.14)*px*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-0.216402)*cj0*r01))+(((-2.0)*cj0*py*pz*r02))+(((0.4)*pz*r00*sj0*sj2))+(((5.88799623168241e-7)*cj0*py))+(((2.0)*px*pz*r00*sj2))+(((0.028)*cj0*r00))+(((-1.0)*cj0*r01*(py*py)))+(((0.216402)*r00*sj0))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((0.306)*r00*sj0*sj2))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py)))))*(IKsin(j1))))+(((-0.0332)*cj2*r02))+(((-0.14)*cj0*r00*sj2))+(((-0.306)*cj0*py*r02*sj2))+(((-0.4)*r00*sj0*sj2))+(((-0.166)*pz*r00*sj0))+((((((r00*sj0*sj2*(pz*pz)))+(((0.14)*cj0*cj2*px*r02))+(((-0.14)*cj0*cj2*pz*r00))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-5.88799623168241e-7)*cj0*py*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.306)*r02*sj2))+(((0.14)*cj0*pz*r00))+(((-0.4)*cj0*pz*r01))+(((5.88799623168241e-7)*px*sj0*sj2))+(((-0.4)*pz*r02*sj2))+(((2.0)*px*pz*r00))+(((-0.4)*px*r00*sj2))+(((0.14)*py*r00*sj2))+(((-0.4)*px*r02*sj0))+((cj2*r02*(py*py)))+(((-5.88799623168241e-7)*pz))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((-0.4)*cj2*pz*r00*sj0))+((cj0*r01*sj2*(py*py)))+(((5.88799623168241e-7)*cj2*pz))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((0.136402)*r02))+(((-0.4)*py*r01*sj2))+(((-0.14)*px*r01*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((0.4)*cj2*px*r02*sj0))+(((0.4)*pz*r00*sj0))+(((0.14)*pz*r01*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.028)*cj0*r00*sj2))+(((-0.050402)*r00*sj0*sj2))+(((0.14)*cj2*py*r02*sj0))+(((0.050402)*cj0*r01*sj2))+(((-2.0)*cj2*px*pz*r00))+(((-0.14)*py*r02*sj0))+(((-1.0)*r02*(px*px)))+(((-0.136402)*cj2*r02))+(((2.0)*py*pz*r01))+(((-0.14)*cj0*px*r02))+(((0.4)*cj0*cj2*pz*r01))+(((1.17759924633648e-7)*sj2))+(((-1.0)*r02*(py*py)))+(((-0.4)*cj0*cj2*py*r02))+(((-0.028)*r01*sj0*sj2))+(((0.4)*cj0*py*r02))+(((2.0)*cj0*py*pz*r02*sj2))+(((-0.14)*cj2*pz*r01*sj0))+((r02*(pz*pz)))))*(IKcos(j1))))+(((-0.14)*r01*sj0*sj2))+(((0.166)*px*r02*sj0))+(((-0.166)*cj2*px*r02*sj0))+(((0.166)*cj0*cj2*py*r02))+(((0.0332)*r02))+(((-2.0)*py*r01*sj2))+(((0.4)*cj0*r01*sj2))+(((-0.166)*cj0*cj2*pz*r01))+(((0.166)*cj0*pz*r01))+(((5.88799623168241e-7)*sj2))+(((0.306)*px*r02*sj0*sj2))+(((-2.0)*px*r00*sj2))+(((0.306)*cj0*pz*r01*sj2))+(((-2.0)*pz*r02*sj2))+(((0.166)*cj2*pz*r00*sj0))+(((-0.306)*pz*r00*sj0*sj2)));
evalcond[2]=((5.88799623168241e-7)+(((-0.4)*r00*sj0))+(((-0.0612)*r02))+(((((1.17759924633648e-7)+((r02*sj2*(py*py)))+(((0.4)*px*r02*sj0*sj2))+(((-1.0)*cj0*cj2*r01*(py*py)))+(((-0.4)*px*r00))+(((-1.0)*r02*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0))+(((2.0)*cj2*px*py*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.306)*cj2*r02))+(((-0.028)*cj0*r00))+(((-0.14)*cj0*pz*r00*sj2))+(((0.14)*py*r00))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((-0.028)*r01*sj0))+(((0.050402)*cj2*r00*sj0))+(((0.14)*cj2*px*r01))+(((0.14)*cj0*px*r02*sj2))+(((-0.14)*px*r01))+(((-0.050402)*cj0*cj2*r01))+(((-1.0)*cj2*r00*sj0*(pz*pz)))+((cj0*cj2*r01*(px*px)))+(((-5.88799623168241e-7)*cj2*px*sj0))+(((-0.306)*r02))+((cj0*cj2*r01*(pz*pz)))+(((-0.050402)*r00*sj0))+(((2.0)*cj0*py*pz*r02))+(((4.195598)*r02*sj2))+(((-0.4)*cj0*py*r02*sj2))+(((0.4)*cj2*pz*r02))+(((2.0)*cj2*px*pz*r02*sj0))+(((0.028)*cj2*r01*sj0))+(((5.88799623168241e-7)*px*sj0))+(((0.4)*cj2*py*r01))+(((-0.14)*cj2*py*r00))+(((-0.14)*pz*r01*sj0*sj2))+(((5.88799623168241e-7)*cj0*cj2*py))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-2.0)*px*py*r01*sj0))+(((0.14)*py*r02*sj0*sj2))+(((2.0)*cj0*px*py*r00))+((r02*sj2*(px*px)))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((0.4)*cj0*pz*r01*sj2))+(((-0.4)*pz*r02))+(((-0.4)*py*r01))+(((-1.0)*cj2*r00*sj0*(py*py)))+(((-2.0)*cj0*cj2*py*pz*r02))+(((5.88799623168241e-7)*pz*sj2))+(((-5.88799623168241e-7)*cj0*py))+((cj2*r00*sj0*(px*px)))+((cj0*r01*(py*py)))+(((-0.4)*pz*r00*sj0*sj2))+(((-1.17759924633648e-7)*cj2))+(((0.4)*cj2*px*r00))+(((-2.0)*cj0*cj2*px*py*r00))+(((0.028)*cj0*cj2*r00))+(((0.050402)*cj0*r01))))*(IKcos(j1))))+(((0.0612)*cj2*r02))+(((-0.14)*r01*sj0))+(((-0.306)*px*r02*sj0))+(((4.166)*cj0*pz*r01*sj2))+(((((((0.029598)*cj2*r02))+(((-0.029598)*r02))+((r00*sj0*sj2*(pz*pz)))+(((0.14)*cj0*cj2*px*r02))+(((-0.14)*cj0*cj2*pz*r00))+(((-1.0)*cj0*r01*sj2*(px*px)))+(((-5.88799623168241e-7)*cj0*py*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.14)*cj0*pz*r00))+(((-0.4)*cj0*pz*r01))+(((5.88799623168241e-7)*px*sj0*sj2))+(((-0.306)*r00*sj0))+(((-0.4)*pz*r02*sj2))+(((2.0)*px*pz*r00))+(((-0.4)*px*r00*sj2))+(((0.14)*py*r00*sj2))+(((0.306)*cj0*r01))+(((-0.4)*px*r02*sj0))+((cj2*r02*(py*py)))+(((-5.88799623168241e-7)*pz))+((cj2*r02*(px*px)))+((r00*sj0*sj2*(py*py)))+(((-0.306)*cj0*cj2*r01))+(((-0.4)*cj2*pz*r00*sj0))+((cj0*r01*sj2*(py*py)))+(((5.88799623168241e-7)*cj2*pz))+(((4.115598)*r00*sj0*sj2))+(((-1.0)*r00*sj0*sj2*(px*px)))+(((0.306)*cj2*r00*sj0))+(((-1.0)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*px*pz*r02*sj0*sj2))+(((-0.4)*py*r01*sj2))+(((-0.14)*px*r01*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.0)*cj0*px*py*r00*sj2))+(((0.4)*cj2*px*r02*sj0))+(((0.4)*pz*r00*sj0))+(((-4.115598)*cj0*r01*sj2))+(((0.14)*pz*r01*sj0))+(((-2.0)*px*py*r01*sj0*sj2))+(((-0.028)*cj0*r00*sj2))+(((0.14)*cj2*py*r02*sj0))+(((-2.0)*cj2*px*pz*r00))+(((-0.14)*py*r02*sj0))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-0.14)*cj0*px*r02))+(((0.4)*cj0*cj2*pz*r01))+(((1.17759924633648e-7)*sj2))+(((-1.0)*r02*(py*py)))+(((-0.4)*cj0*cj2*py*r02))+(((-0.028)*r01*sj0*sj2))+(((0.4)*cj0*py*r02))+(((2.0)*cj0*py*pz*r02*sj2))+(((-0.14)*cj2*pz*r01*sj0))+((r02*(pz*pz)))))*(IKsin(j1))))+(((-0.306)*cj0*cj2*py*r02))+(((-2.0)*pz*r02))+(((0.306)*pz*r00*sj0))+(((-0.14)*cj0*r00))+(((2.0)*cj2*px*r00))+(((0.14)*cj2*r01*sj0))+(((0.14)*cj0*cj2*r00))+(((0.306)*cj0*py*r02))+(((-0.306)*cj2*pz*r00*sj0))+(((4.166)*px*r02*sj0*sj2))+(((-4.166)*cj0*py*r02*sj2))+(((0.8332)*r02*sj2))+(((-2.0)*px*r00))+(((0.4)*cj2*r00*sj0))+(((-0.306)*cj0*pz*r01))+(((0.306)*cj0*cj2*pz*r01))+(((2.0)*cj2*pz*r02))+(((-5.88799623168241e-7)*cj2))+(((-4.166)*pz*r00*sj0*sj2))+(((0.4)*cj0*r01))+(((-0.4)*cj0*cj2*r01))+(((0.306)*cj2*px*r02*sj0))+(((2.0)*cj2*py*r01))+(((-2.0)*py*r01)));
evalcond[3]=((5.88799623168241e-7)+(((-2.0)*cj2*py*r01))+(((((((0.4)*pz*r02*sj2))+(((-0.029598)*r02))+(((-1.0)*r00*sj0*sj2*(pz*pz)))+(((0.306)*r00*sj0))+(((-0.14)*py*r00*sj2))+(((-0.4)*cj0*cj2*pz*r01))+(((-5.88799623168241e-7)*px*sj0*sj2))+(((0.028)*cj0*r00*sj2))+(((0.216402)*r00*sj0*sj2))+(((0.14)*cj0*pz*r00))+(((-0.4)*cj0*pz*r01))+(((-0.029598)*cj2*r02))+(((0.14)*cj2*pz*r01*sj0))+((r00*sj0*sj2*(px*px)))+(((2.0)*px*pz*r00))+(((-2.0)*cj0*px*py*r00*sj2))+(((-1.0)*cj2*r02*(px*px)))+(((-0.4)*px*r02*sj0))+(((0.4)*cj2*pz*r00*sj0))+(((-5.88799623168241e-7)*pz))+((cj2*r02*(pz*pz)))+(((5.88799623168241e-7)*cj0*py*sj2))+(((-0.216402)*cj0*r01*sj2))+(((-0.306)*cj0*cj2*r01))+(((0.14)*cj0*cj2*pz*r00))+(((2.0)*cj2*px*pz*r00))+((cj0*r01*sj2*(pz*pz)))+(((-1.0)*cj0*r01*sj2*(py*py)))+(((-1.0)*r00*sj0*sj2*(py*py)))+(((-5.88799623168241e-7)*cj2*pz))+(((0.4)*cj0*cj2*py*r02))+(((-1.17759924633648e-7)*sj2))+(((0.306)*cj2*r00*sj0))+(((2.0)*cj2*py*pz*r01))+(((-0.14)*cj2*py*r02*sj0))+(((0.14)*px*r01*sj2))+(((2.0)*px*pz*r02*sj0*sj2))+(((-1.0)*cj2*r02*(py*py)))+(((-0.14)*cj0*cj2*px*r02))+(((0.4)*pz*r00*sj0))+(((2.0)*px*py*r01*sj0*sj2))+(((0.14)*pz*r01*sj0))+(((0.4)*py*r01*sj2))+(((-0.4)*cj2*px*r02*sj0))+(((-0.14)*py*r02*sj0))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-0.14)*cj0*px*r02))+(((-1.0)*r02*(py*py)))+(((-2.0)*cj0*py*pz*r02*sj2))+(((-0.306)*cj0*r01))+(((0.4)*cj0*py*r02))+((cj0*r01*sj2*(px*px)))+(((0.028)*r01*sj0*sj2))+(((0.4)*px*r00*sj2))+((r02*(pz*pz)))))*(IKsin(j1))))+(((-0.4)*r00*sj0))+(((-0.166)*pz*r00*sj0*sj2))+(((0.0612)*cj2*r02))+(((-0.14)*r01*sj0))+(((-0.306)*cj0*cj2*py*r02))+(((-2.0)*pz*r02))+(((-0.4)*cj2*r00*sj0))+(((-0.14)*cj0*r00))+(((0.306)*px*r02*sj0))+(((0.166)*cj0*pz*r01*sj2))+(((-0.306)*cj2*pz*r00*sj0))+(((0.4)*cj0*cj2*r01))+(((-2.0)*px*r00))+(((0.306)*cj0*pz*r01))+(((5.88799623168241e-7)*cj2))+(((0.0332)*r02*sj2))+(((0.166)*px*r02*sj0*sj2))+(((-0.14)*cj2*r01*sj0))+(((-2.0)*cj2*px*r00))+(((-0.14)*cj0*cj2*r00))+(((0.306)*cj0*cj2*pz*r01))+(((-0.166)*cj0*py*r02*sj2))+(((0.4)*cj0*r01))+(((0.0612)*r02))+(((-0.306)*cj0*py*r02))+(((0.306)*cj2*px*r02*sj0))+(((-0.306)*pz*r00*sj0))+(((-2.0)*py*r01))+(((((1.17759924633648e-7)+(((0.14)*cj0*pz*r00*sj2))+(((-0.4)*px*r00))+(((-0.4)*cj2*pz*r02))+(((-2.0)*px*pz*r02*sj0))+(((-0.028)*cj2*r01*sj0))+(((-1.0)*cj0*r01*(pz*pz)))+(((0.306)*cj2*r02))+(((-0.14)*py*r02*sj0*sj2))+(((-0.14)*cj2*px*r01))+(((0.050402)*cj0*cj2*r01))+(((-0.028)*cj0*r00))+(((-2.0)*cj2*px*pz*r02*sj0))+(((0.14)*py*r00))+(((-1.0)*r00*sj0*(px*px)))+((r00*sj0*(pz*pz)))+(((-0.4)*cj2*px*r00))+(((-0.028)*r01*sj0))+(((-0.14)*px*r01))+((cj2*r00*sj0*(pz*pz)))+(((-1.0)*cj0*cj2*r01*(pz*pz)))+(((-0.050402)*cj2*r00*sj0))+(((2.0)*cj0*cj2*py*pz*r02))+(((-5.88799623168241e-7)*cj0*cj2*py))+((cj2*r00*sj0*(py*py)))+(((-0.050402)*r00*sj0))+(((0.14)*cj2*py*r00))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-2.0)*cj2*px*py*r01*sj0))+(((2.0)*cj0*py*pz*r02))+(((-1.0)*cj0*cj2*r01*(px*px)))+(((0.4)*cj0*py*r02*sj2))+(((-0.14)*cj0*px*r02*sj2))+(((5.88799623168241e-7)*px*sj0))+(((2.0)*py*pz*r01*sj2))+(((-0.4)*px*r02*sj0*sj2))+(((5.88799623168241e-7)*cj2*px*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-2.0)*px*py*r01*sj0))+(((2.0)*cj0*px*py*r00))+(((-1.0)*cj0*r01*(px*px)))+((r00*sj0*(py*py)))+(((1.17759924633648e-7)*cj2))+(((-0.4)*pz*r02))+(((2.0)*cj0*cj2*px*py*r00))+(((-0.4)*py*r01))+(((-0.4)*cj0*pz*r01*sj2))+(((0.14)*pz*r01*sj0*sj2))+(((-5.88799623168241e-7)*cj0*py))+(((0.136402)*r02*sj2))+((cj0*r01*(py*py)))+(((0.4)*pz*r00*sj0*sj2))+(((2.0)*px*pz*r00*sj2))+(((-1.0)*cj2*r00*sj0*(px*px)))+(((-5.88799623168241e-7)*pz*sj2))+(((-0.4)*cj2*py*r01))+(((-0.028)*cj0*cj2*r00))+((cj0*cj2*r01*(py*py)))+(((0.306)*r02))+(((0.050402)*cj0*r01))))*(IKcos(j1))))+(((-2.0)*cj2*pz*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x237=((2.17391304347826)*cj1);
IkReal x238=(cj0*py);
IkReal x239=(cj2*sj1);
IkReal x240=(pz*sj2);
IkReal x241=((2.17391304347826)*sj1);
IkReal x242=((0.434782608695652)*cj1);
IkReal x243=(px*sj0);
if( IKabs(((-0.332608695652174)+((cj2*pz*x237))+((sj2*x242))+((sj2*x237*x243))+(((2.17391304347826)*x239*x243))+(((2.17391304347826)*sj2))+(((-1.0)*sj2*x237*x238))+(((0.434782608695652)*x239))+(((-1.0)*x240*x241))+(((-2.17391304347826)*x238*x239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.35434782608696)+(((0.434782608695652)*sj1*sj2))+(((-1.0)*sj2*x238*x241))+((x237*x240))+((sj2*x241*x243))+(((-1.0)*cj2*x242))+(((-1.0)*cj2*x237*x243))+((cj2*x237*x238))+(((-2.17391304347826)*cj2))+(((2.17391304347826)*pz*x239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.332608695652174)+((cj2*pz*x237))+((sj2*x242))+((sj2*x237*x243))+(((2.17391304347826)*x239*x243))+(((2.17391304347826)*sj2))+(((-1.0)*sj2*x237*x238))+(((0.434782608695652)*x239))+(((-1.0)*x240*x241))+(((-2.17391304347826)*x238*x239))))+IKsqr(((-2.35434782608696)+(((0.434782608695652)*sj1*sj2))+(((-1.0)*sj2*x238*x241))+((x237*x240))+((sj2*x241*x243))+(((-1.0)*cj2*x242))+(((-1.0)*cj2*x237*x243))+((cj2*x237*x238))+(((-2.17391304347826)*cj2))+(((2.17391304347826)*pz*x239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.332608695652174)+((cj2*pz*x237))+((sj2*x242))+((sj2*x237*x243))+(((2.17391304347826)*x239*x243))+(((2.17391304347826)*sj2))+(((-1.0)*sj2*x237*x238))+(((0.434782608695652)*x239))+(((-1.0)*x240*x241))+(((-2.17391304347826)*x238*x239))), ((-2.35434782608696)+(((0.434782608695652)*sj1*sj2))+(((-1.0)*sj2*x238*x241))+((x237*x240))+((sj2*x241*x243))+(((-1.0)*cj2*x242))+(((-1.0)*cj2*x237*x243))+((cj2*x237*x238))+(((-2.17391304347826)*cj2))+(((2.17391304347826)*pz*x239))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x244=IKsin(j3);
IkReal x245=IKcos(j3);
IkReal x246=(cj0*sj1);
IkReal x247=(cj0*cj1);
IkReal x248=((1.0)*cj1);
IkReal x249=((0.999999680000154)*cj4);
IkReal x250=((0.000799999488000328)*sj4);
IkReal x251=(cj2*x245);
IkReal x252=((1.0)*sj0*sj1);
IkReal x253=(cj2*x244);
IkReal x254=(sj2*x245);
IkReal x255=(sj2*x244);
evalcond[0]=((((-1.0)*pz*x248))+(((0.46)*x254))+(((0.46)*x253))+(((0.153)*cj2))+(((-0.2)*sj1))+((py*x246))+(((-1.0)*px*x252))+(((1.083)*sj2)));
evalcond[1]=((-1.0)+(((0.153)*sj2))+(((-1.083)*cj2))+(((-0.2)*cj1))+(((-0.46)*x251))+(((0.46)*x255))+(((-1.0)*px*sj0*x248))+((py*x247))+((pz*sj1)));
evalcond[2]=((((-1.0)*x250*x254))+(((-1.0)*x250*x253))+(((-6.39999590400262e-7)*x251))+((x249*x254))+((x249*x253))+(((6.39999590400262e-7)*x255))+(((-1.0)*r00*sj0*x248))+((r02*sj1))+((r01*x247)));
evalcond[3]=((((-1.0)*x250*x251))+((x249*x251))+(((6.39999590400262e-7)*x253))+(((6.39999590400262e-7)*x254))+(((-1.0)*r00*x252))+((x250*x255))+(((-1.0)*r02*x248))+(((-1.0)*x249*x255))+((r01*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "29ed2784afac541a825dd83a6898794b"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
